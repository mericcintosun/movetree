{
  "version": 3,
  "sources": ["../../../src/pyth/pyth.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport type { SuiClient } from '@mysten/sui/client';\nimport type { Transaction } from '@mysten/sui/transactions';\nimport { coinWithBalance } from '@mysten/sui/transactions';\nimport { fromBase64, fromHex, parseStructTag } from '@mysten/sui/utils';\n\nimport type { HexString } from './PriceServiceConnection.js';\nimport { PriceServiceConnection } from './PriceServiceConnection.js';\nimport { extractVaaBytesFromAccumulatorMessage } from './pyth-helpers.js';\n\nconst MAX_ARGUMENT_SIZE = 16 * 1024;\nexport type ObjectId = string;\nexport class SuiPriceServiceConnection extends PriceServiceConnection {\n\t/**\n\t * Fetch price feed update data.\n\t *\n\t * @param priceIds Array of hex-encoded price IDs.\n\t * @returns Array of buffers containing the price update data.\n\t */\n\tasync getPriceFeedsUpdateData(priceIds: HexString[]): Promise<Uint8Array[]> {\n\t\tconst latestVaas = await this.getLatestVaas(priceIds);\n\t\treturn latestVaas.map((vaa) => fromBase64(vaa));\n\t}\n}\nexport class SuiPythClient {\n\t#pythPackageId?: Promise<ObjectId>;\n\t#wormholePackageId?: Promise<ObjectId>;\n\t#priceFeedObjectIdCache: Map<HexString, Promise<ObjectId>> = new Map();\n\t#priceTableInfo?: Promise<{ id: ObjectId; fieldType: ObjectId }>;\n\t#baseUpdateFee?: Promise<number>;\n\tprovider: SuiClient;\n\tpythStateId: ObjectId;\n\twormholeStateId: ObjectId;\n\n\tconstructor(provider: SuiClient, pythStateId: ObjectId, wormholeStateId: ObjectId) {\n\t\tthis.provider = provider;\n\t\tthis.pythStateId = pythStateId;\n\t\tthis.wormholeStateId = wormholeStateId;\n\t}\n\t/**\n\t * Verifies the VAAs using the Wormhole contract.\n\t *\n\t * @param vaas Array of VAA buffers to verify.\n\t * @param tx Transaction block to add commands to.\n\t * @returns Array of verified VAAs.\n\t */\n\tasync verifyVaas(vaas: Uint8Array[], tx: Transaction) {\n\t\tconst wormholePackageId = await this.getWormholePackageId();\n\t\tconst verifiedVaas = [];\n\t\tfor (const vaa of vaas) {\n\t\t\tconst [verifiedVaa] = tx.moveCall({\n\t\t\t\ttarget: `${wormholePackageId}::vaa::parse_and_verify`,\n\t\t\t\targuments: [tx.object(this.wormholeStateId), tx.pure.vector('u8', vaa), tx.object.clock()],\n\t\t\t});\n\t\t\tverifiedVaas.push(verifiedVaa);\n\t\t}\n\t\treturn verifiedVaas;\n\t}\n\t/**\n\t * Adds the necessary commands for updating the Pyth price feeds to the transaction block.\n\t *\n\t * @param tx Transaction block to add commands to.\n\t * @param updates Array of price feed updates received from the price service.\n\t * @param feedIds Array of feed IDs to update (in hex format).\n\t */\n\tasync updatePriceFeeds(\n\t\ttx: Transaction,\n\t\tupdates: Uint8Array[],\n\t\tfeedIds: HexString[],\n\t): Promise<ObjectId[]> {\n\t\tconst packageId = await this.getPythPackageId();\n\t\tlet priceUpdatesHotPotato;\n\t\tif (updates.length > 1) {\n\t\t\tthrow new Error(\n\t\t\t\t'SDK does not support sending multiple accumulator messages in a single transaction',\n\t\t\t);\n\t\t}\n\t\tconst vaa = extractVaaBytesFromAccumulatorMessage(updates[0]);\n\t\tconst verifiedVaas = await this.verifyVaas([vaa], tx);\n\t\t[priceUpdatesHotPotato] = tx.moveCall({\n\t\t\ttarget: `${packageId}::pyth::create_authenticated_price_infos_using_accumulator`,\n\t\t\targuments: [\n\t\t\t\ttx.object(this.pythStateId),\n\t\t\t\ttx.pure(\n\t\t\t\t\tbcs\n\t\t\t\t\t\t.vector(bcs.U8)\n\t\t\t\t\t\t.serialize(Array.from(updates[0]), {\n\t\t\t\t\t\t\tmaxSize: MAX_ARGUMENT_SIZE,\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.toBytes(),\n\t\t\t\t),\n\t\t\t\tverifiedVaas[0],\n\t\t\t\ttx.object.clock(),\n\t\t\t],\n\t\t});\n\t\tconst priceInfoObjects: ObjectId[] = [];\n\t\tconst baseUpdateFee = await this.getBaseUpdateFee();\n\t\tfor (const feedId of feedIds) {\n\t\t\tconst priceInfoObjectId = await this.getPriceFeedObjectId(feedId);\n\t\t\tif (!priceInfoObjectId) {\n\t\t\t\tthrow new Error(`Price feed ${feedId} not found, please create it first`);\n\t\t\t}\n\t\t\tpriceInfoObjects.push(priceInfoObjectId);\n\t\t\t[priceUpdatesHotPotato] = tx.moveCall({\n\t\t\t\ttarget: `${packageId}::pyth::update_single_price_feed`,\n\t\t\t\targuments: [\n\t\t\t\t\ttx.object(this.pythStateId),\n\t\t\t\t\tpriceUpdatesHotPotato,\n\t\t\t\t\ttx.object(priceInfoObjectId),\n\t\t\t\t\tcoinWithBalance({ balance: baseUpdateFee }),\n\t\t\t\t\ttx.object.clock(),\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\t\ttx.moveCall({\n\t\t\ttarget: `${packageId}::hot_potato_vector::destroy`,\n\t\t\targuments: [priceUpdatesHotPotato],\n\t\t\ttypeArguments: [`${packageId}::price_info::PriceInfo`],\n\t\t});\n\t\treturn priceInfoObjects;\n\t}\n\t/**\n\t * Get the price feed object ID for a given feed ID, caching the promise.\n\t * @param feedId\n\t */\n\tgetPriceFeedObjectId(feedId: HexString): Promise<ObjectId | undefined> {\n\t\tif (!this.#priceFeedObjectIdCache.has(feedId)) {\n\t\t\tthis.#priceFeedObjectIdCache.set(\n\t\t\t\tfeedId,\n\t\t\t\tthis.#fetchPriceFeedObjectId(feedId).catch((err) => {\n\t\t\t\t\t// Remove failed promises from the cache to allow retries\n\t\t\t\t\tthis.#priceFeedObjectIdCache.delete(feedId);\n\t\t\t\t\tthrow err;\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\treturn this.#priceFeedObjectIdCache.get(feedId)!;\n\t}\n\n\t/**\n\t * Fetches the price feed object ID for a given feed ID (no caching).\n\t * Throws an error if the object is not found.\n\t */\n\tasync #fetchPriceFeedObjectId(feedId: HexString): Promise<ObjectId> {\n\t\tconst { id: tableId, fieldType } = await this.getPriceTableInfo();\n\t\tconst result = await this.provider.getDynamicFieldObject({\n\t\t\tparentId: tableId,\n\t\t\tname: {\n\t\t\t\ttype: `${fieldType}::price_identifier::PriceIdentifier`,\n\t\t\t\tvalue: {\n\t\t\t\t\tbytes: Array.from(fromHex(feedId)),\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tif (!result.data || !result.data.content) {\n\t\t\tthrow new Error(`Price feed object ID for feed ID ${feedId} not found.`);\n\t\t}\n\t\tif (result.data.content.dataType !== 'moveObject') {\n\t\t\tthrow new Error('Price feed type mismatch');\n\t\t}\n\n\t\t// @ts-ignore\n\t\treturn result.data.content.fields.value;\n\t}\n\n\t/**\n\t * Fetches the price table object ID for the current state ID, caching the promise.\n\t * @returns Price table object ID and field type\n\t */\n\tgetPriceTableInfo(): Promise<{ id: ObjectId; fieldType: ObjectId }> {\n\t\tif (!this.#priceTableInfo) {\n\t\t\tconst promise = this.#fetchPriceTableInfo().catch((err) => {\n\t\t\t\t// Clear the cached promise on error\n\t\t\t\tthis.#priceTableInfo = undefined;\n\t\t\t\tthrow err;\n\t\t\t});\n\n\t\t\tthis.#priceTableInfo = promise;\n\t\t}\n\n\t\treturn this.#priceTableInfo;\n\t}\n\n\t/**\n\t * Fetches the price table object ID and field type (no caching).\n\t * @returns Price table object ID and field type\n\t */\n\tasync #fetchPriceTableInfo(): Promise<{ id: ObjectId; fieldType: ObjectId }> {\n\t\tconst result = await this.provider.getDynamicFieldObject({\n\t\t\tparentId: this.pythStateId,\n\t\t\tname: {\n\t\t\t\ttype: 'vector<u8>',\n\t\t\t\tvalue: 'price_info',\n\t\t\t},\n\t\t});\n\n\t\tif (!result.data || !result.data.type) {\n\t\t\tthrow new Error('Price Table not found, contract may not be initialized');\n\t\t}\n\n\t\tconst priceIdentifier = parseStructTag(result.data.type).typeParams[0];\n\t\tif (\n\t\t\ttypeof priceIdentifier === 'object' &&\n\t\t\tpriceIdentifier !== null &&\n\t\t\tpriceIdentifier.name === 'PriceIdentifier' &&\n\t\t\t'address' in priceIdentifier\n\t\t) {\n\t\t\treturn { id: result.data.objectId, fieldType: priceIdentifier.address };\n\t\t} else {\n\t\t\tthrow new Error('fieldType not found');\n\t\t}\n\t}\n\t/**\n\t * Fetches the package ID for the Wormhole contract, with caching.\n\t */\n\tgetWormholePackageId(): Promise<ObjectId> {\n\t\tif (!this.#wormholePackageId) {\n\t\t\tthis.#wormholePackageId = this.#fetchWormholePackageId();\n\t\t}\n\t\treturn this.#wormholePackageId;\n\t}\n\n\t/**\n\t * Fetches the package ID for the Wormhole contract (no caching).\n\t */\n\tasync #fetchWormholePackageId(): Promise<ObjectId> {\n\t\treturn await this.#getPackageId(this.wormholeStateId);\n\t}\n\n\t/**\n\t * Fetches the package ID for the Pyth contract, with caching.\n\t */\n\tgetPythPackageId(): Promise<ObjectId> {\n\t\tif (!this.#pythPackageId) {\n\t\t\tthis.#pythPackageId = this.#fetchPythPackageId();\n\t\t}\n\t\treturn this.#pythPackageId;\n\t}\n\n\t/**\n\t * Fetches the package ID for the Pyth contract (no caching).\n\t */\n\tasync #fetchPythPackageId(): Promise<ObjectId> {\n\t\treturn await this.#getPackageId(this.pythStateId);\n\t}\n\n\t/**\n\t * Fetches the package ID for a given object.\n\t *\n\t * @param objectId Object ID to fetch the package ID for.\n\t */\n\tasync #getPackageId(objectId: ObjectId): Promise<ObjectId> {\n\t\tconst result = await this.provider.getObject({\n\t\t\tid: objectId,\n\t\t\toptions: { showContent: true },\n\t\t});\n\n\t\tif (\n\t\t\tresult.data?.content?.dataType === 'moveObject' &&\n\t\t\t'upgrade_cap' in result.data.content.fields\n\t\t) {\n\t\t\tconst fields = result.data.content.fields as {\n\t\t\t\tupgrade_cap: {\n\t\t\t\t\tfields: {\n\t\t\t\t\t\tpackage: ObjectId;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t\treturn fields.upgrade_cap.fields.package;\n\t\t}\n\n\t\tthrow new Error(`Cannot fetch package ID for object ${objectId}`);\n\t}\n\t/**\n\t * Gets the base update fee from the Pyth state object.\n\t */\n\tasync #fetchBaseUpdateFee(): Promise<number> {\n\t\tconst result = await this.provider.getObject({\n\t\t\tid: this.pythStateId,\n\t\t\toptions: { showContent: true },\n\t\t});\n\n\t\tif (!result.data || result.data.content?.dataType !== 'moveObject') {\n\t\t\tthrow new Error('Unable to fetch Pyth state object');\n\t\t}\n\n\t\tconst fields = result.data.content.fields as { base_update_fee: number };\n\t\treturn fields.base_update_fee;\n\t}\n\n\t/**\n\t * Returns the cached base update fee, fetching it if necessary.\n\t */\n\tgetBaseUpdateFee(): Promise<number> {\n\t\tif (!this.#baseUpdateFee) {\n\t\t\tthis.#baseUpdateFee = this.#fetchBaseUpdateFee();\n\t\t}\n\t\treturn this.#baseUpdateFee;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
