{
  "version": 3,
  "sources": ["../../src/suins-client.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { SuiClient } from '@mysten/sui/client';\nimport type { Transaction } from '@mysten/sui/transactions';\nimport { isValidSuiNSName, normalizeSuiNSName } from '@mysten/sui/utils';\n\nimport { mainPackage } from './constants.js';\nimport {\n\tgetCoinDiscountConfigType,\n\tgetConfigType,\n\tgetDomainType,\n\tgetPricelistConfigType,\n\tgetRenewalPricelistConfigType,\n\tisSubName,\n\tvalidateYears,\n} from './helpers.js';\nimport { SuiPriceServiceConnection, SuiPythClient } from './pyth/pyth.js';\nimport type {\n\tCoinTypeDiscount,\n\tNameRecord,\n\tNetwork,\n\tPackageInfo,\n\tSuinsClientConfig,\n\tSuinsPriceList,\n} from './types.js';\n\n/// The SuinsClient is the main entry point for the Suins SDK.\n/// It allows you to interact with SuiNS.\nexport class SuinsClient {\n\tclient: SuiClient;\n\tnetwork: Network;\n\tconfig: PackageInfo;\n\n\tconstructor(config: SuinsClientConfig) {\n\t\tthis.client = config.client;\n\t\tthis.network = config.network || 'mainnet';\n\n\t\tif (this.network === 'mainnet') {\n\t\t\tthis.config = mainPackage.mainnet;\n\t\t} else if (this.network === 'testnet') {\n\t\t\tthis.config = mainPackage.testnet;\n\t\t} else {\n\t\t\tthrow new Error('Invalid network');\n\t\t}\n\t}\n\n\t/**\n\t * Returns the price list for SuiNS names in the base asset.\n\t */\n\n\t// Format:\n\t// {\n\t// \t[ 3, 3 ] => 500000000,\n\t// \t[ 4, 4 ] => 100000000,\n\t// \t[ 5, 63 ] => 20000000\n\t// }\n\tasync getPriceList(): Promise<SuinsPriceList> {\n\t\tif (!this.config.suins) throw new Error('Suins object ID is not set');\n\t\tif (!this.config.packageId) throw new Error('Price list config not found');\n\n\t\tconst priceList = await this.client.getDynamicFieldObject({\n\t\t\tparentId: this.config.suins,\n\t\t\tname: {\n\t\t\t\ttype: getConfigType(\n\t\t\t\t\tthis.config.packageIdV1,\n\t\t\t\t\tgetPricelistConfigType(this.config.packageIdPricing),\n\t\t\t\t),\n\t\t\t\tvalue: { dummy_field: false },\n\t\t\t},\n\t\t});\n\n\t\t// Ensure the content exists and is a MoveStruct with expected fields\n\t\tif (\n\t\t\t!priceList?.data?.content ||\n\t\t\tpriceList.data.content.dataType !== 'moveObject' ||\n\t\t\t!('fields' in priceList.data.content)\n\t\t) {\n\t\t\tthrow new Error('Price list not found or content is invalid');\n\t\t}\n\n\t\t// Safely extract fields\n\t\tconst fields = priceList.data.content.fields as Record<string, any>;\n\t\tif (!fields.value || !fields.value.fields || !fields.value.fields.pricing) {\n\t\t\tthrow new Error('Pricing fields not found in the price list');\n\t\t}\n\n\t\tconst contentArray = fields.value.fields.pricing.fields.contents;\n\t\tconst priceMap = new Map();\n\n\t\tfor (const entry of contentArray) {\n\t\t\tconst keyFields = entry.fields.key.fields;\n\t\t\tconst key = [Number(keyFields.pos0), Number(keyFields.pos1)]; // Convert keys to numbers\n\t\t\tconst value = Number(entry.fields.value); // Convert value to a number\n\n\t\t\tpriceMap.set(key, value);\n\t\t}\n\n\t\treturn priceMap;\n\t}\n\n\t/**\n\t * Returns the renewal price list for SuiNS names in the base asset.\n\t */\n\n\t// Format:\n\t// {\n\t// \t[ 3, 3 ] => 500000000,\n\t// \t[ 4, 4 ] => 100000000,\n\t// \t[ 5, 63 ] => 20000000\n\t// }\n\tasync getRenewalPriceList(): Promise<SuinsPriceList> {\n\t\tif (!this.config.suins) throw new Error('Suins object ID is not set');\n\t\tif (!this.config.packageId) throw new Error('Price list config not found');\n\n\t\tconst priceList = await this.client.getDynamicFieldObject({\n\t\t\tparentId: this.config.suins,\n\t\t\tname: {\n\t\t\t\ttype: getConfigType(\n\t\t\t\t\tthis.config.packageIdV1,\n\t\t\t\t\tgetRenewalPricelistConfigType(this.config.packageIdPricing),\n\t\t\t\t),\n\t\t\t\tvalue: { dummy_field: false },\n\t\t\t},\n\t\t});\n\n\t\tif (\n\t\t\t!priceList ||\n\t\t\t!priceList.data ||\n\t\t\t!priceList.data.content ||\n\t\t\tpriceList.data.content.dataType !== 'moveObject' ||\n\t\t\t!('fields' in priceList.data.content)\n\t\t) {\n\t\t\tthrow new Error('Price list not found or content structure is invalid');\n\t\t}\n\n\t\t// Safely extract fields\n\t\tconst fields = priceList.data.content.fields as Record<string, any>;\n\t\tif (\n\t\t\t!fields.value ||\n\t\t\t!fields.value.fields ||\n\t\t\t!fields.value.fields.config ||\n\t\t\t!fields.value.fields.config.fields.pricing ||\n\t\t\t!fields.value.fields.config.fields.pricing.fields.contents\n\t\t) {\n\t\t\tthrow new Error('Pricing fields not found in the price list');\n\t\t}\n\n\t\tconst contentArray = fields.value.fields.config.fields.pricing.fields.contents;\n\t\tconst priceMap = new Map();\n\n\t\tfor (const entry of contentArray) {\n\t\t\tconst keyFields = entry.fields.key.fields;\n\t\t\tconst key = [Number(keyFields.pos0), Number(keyFields.pos1)]; // Convert keys to numbers\n\t\t\tconst value = Number(entry.fields.value); // Convert value to a number\n\n\t\t\tpriceMap.set(key, value);\n\t\t}\n\n\t\treturn priceMap;\n\t}\n\n\t/**\n\t * Returns the coin discount list for SuiNS names.\n\t */\n\n\t// Format:\n\t// {\n\t// \t'b48aac3f53bab328e1eb4c5b3c34f55e760f2fb3f2305ee1a474878d80f650f0::TESTUSDC::TESTUSDC' => 0,\n\t// \t'0000000000000000000000000000000000000000000000000000000000000002::sui::SUI' => 0,\n\t// \t'b48aac3f53bab328e1eb4c5b3c34f55e760f2fb3f2305ee1a474878d80f650f0::TESTNS::TESTNS' => 25\n\t// }\n\tasync getCoinTypeDiscount(): Promise<CoinTypeDiscount> {\n\t\tif (!this.config.suins) throw new Error('Suins object ID is not set');\n\t\tif (!this.config.packageId) throw new Error('Price list config not found');\n\n\t\tconst dfValue = await this.client.getDynamicFieldObject({\n\t\t\tparentId: this.config.suins,\n\t\t\tname: {\n\t\t\t\ttype: getConfigType(\n\t\t\t\t\tthis.config.packageIdV1,\n\t\t\t\t\tgetCoinDiscountConfigType(this.config.payments.packageId),\n\t\t\t\t),\n\t\t\t\tvalue: { dummy_field: false },\n\t\t\t},\n\t\t});\n\n\t\tif (\n\t\t\t!dfValue ||\n\t\t\t!dfValue.data ||\n\t\t\t!dfValue.data.content ||\n\t\t\tdfValue.data.content.dataType !== 'moveObject' ||\n\t\t\t!('fields' in dfValue.data.content)\n\t\t) {\n\t\t\tthrow new Error('dfValue not found or content structure is invalid');\n\t\t}\n\n\t\t// Safely extract fields\n\t\tconst fields = dfValue.data.content.fields as Record<string, any>;\n\t\tif (\n\t\t\t!fields.value ||\n\t\t\t!fields.value.fields ||\n\t\t\t!fields.value.fields.base_currency ||\n\t\t\t!fields.value.fields.base_currency.fields ||\n\t\t\t!fields.value.fields.base_currency.fields.name ||\n\t\t\t!fields.value.fields.currencies ||\n\t\t\t!fields.value.fields.currencies.fields ||\n\t\t\t!fields.value.fields.currencies.fields.contents\n\t\t) {\n\t\t\tthrow new Error('Required fields are missing in dfValue');\n\t\t}\n\n\t\t// Safely extract content\n\t\tconst content = fields.value.fields;\n\t\tconst currencyDiscounts = content.currencies.fields.contents;\n\t\tconst discountMap = new Map();\n\n\t\tfor (const entry of currencyDiscounts) {\n\t\t\tconst key = entry.fields.key.fields.name;\n\t\t\tconst value = Number(entry.fields.value.fields.discount_percentage);\n\n\t\t\tdiscountMap.set(key, value);\n\t\t}\n\n\t\treturn discountMap;\n\t}\n\n\tasync getNameRecord(name: string): Promise<NameRecord | null> {\n\t\tif (!isValidSuiNSName(name)) throw new Error('Invalid SuiNS name');\n\t\tif (!this.config.registryTableId) throw new Error('Suins package ID is not set');\n\n\t\tconst nameRecord = await this.client.getDynamicFieldObject({\n\t\t\tparentId: this.config.registryTableId,\n\t\t\tname: {\n\t\t\t\ttype: getDomainType(this.config.packageIdV1),\n\t\t\t\tvalue: normalizeSuiNSName(name, 'dot').split('.').reverse(),\n\t\t\t},\n\t\t});\n\n\t\tconst fields = nameRecord.data?.content;\n\n\t\t// in case the name record is not found, return null\n\t\tif (nameRecord.error?.code === 'dynamicFieldNotFound') return null;\n\n\t\tif (nameRecord.error || !fields || fields.dataType !== 'moveObject')\n\t\t\tthrow new Error('Name record not found. This domain is not registered.');\n\t\tconst content = fields.fields as Record<string, any>;\n\n\t\tconst data: Record<string, string> = {};\n\t\tcontent.value.fields.data.fields.contents.forEach((item: any) => {\n\t\t\t// @ts-ignore-next-line\n\t\t\tdata[item.fields.key as string] = item.fields.value;\n\t\t});\n\n\t\treturn {\n\t\t\tname,\n\t\t\tnftId: content.value.fields?.nft_id,\n\t\t\ttargetAddress: content.value.fields?.target_address!,\n\t\t\texpirationTimestampMs: content.value.fields?.expiration_timestamp_ms,\n\t\t\tdata,\n\t\t\tavatar: data.avatar,\n\t\t\tcontentHash: data.content_hash,\n\t\t\twalrusSiteId: data.walrus_site_id,\n\t\t};\n\t}\n\n\t/**\n\t * Calculates the registration or renewal price for an SLD (Second Level Domain).\n\t * It expects a domain name, the number of years and a `SuinsPriceList` object,\n\t * as returned from `suinsClient.getPriceList()` function, or `suins.getRenewalPriceList()` function.\n\t *\n\t * It throws an error:\n\t * 1. if the name is a subdomain\n\t * 2. if the name is not a valid SuiNS name\n\t * 3. if the years are not between 1 and 5\n\t */\n\tasync calculatePrice({\n\t\tname,\n\t\tyears,\n\t\tisRegistration = true,\n\t}: {\n\t\tname: string;\n\t\tyears: number;\n\t\tisRegistration?: boolean;\n\t}) {\n\t\tif (!isValidSuiNSName(name)) {\n\t\t\tthrow new Error('Invalid SuiNS name');\n\t\t}\n\t\tvalidateYears(years);\n\n\t\tif (isSubName(name)) {\n\t\t\tthrow new Error('Subdomains do not have a registration fee');\n\t\t}\n\n\t\tconst length = normalizeSuiNSName(name, 'dot').split('.')[0].length;\n\t\tconst priceList = await this.getPriceList();\n\t\tconst renewalPriceList = await this.getRenewalPriceList();\n\t\tlet yearsRemain = years;\n\t\tlet price = 0;\n\n\t\tif (isRegistration) {\n\t\t\tfor (const [[minLength, maxLength], pricePerYear] of priceList.entries()) {\n\t\t\t\tif (length >= minLength && length <= maxLength) {\n\t\t\t\t\tprice += pricePerYear; // Registration is always 1 year\n\t\t\t\t\tyearsRemain -= 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const [[minLength, maxLength], pricePerYear] of renewalPriceList.entries()) {\n\t\t\tif (length >= minLength && length <= maxLength) {\n\t\t\t\tprice += yearsRemain * pricePerYear;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn price;\n\t}\n\n\tasync getPriceInfoObject(tx: Transaction, feed: string) {\n\t\t// Initialize connection to the Sui Price Service\n\t\tconst endpoint =\n\t\t\tthis.network === 'testnet'\n\t\t\t\t? 'https://hermes-beta.pyth.network'\n\t\t\t\t: 'https://hermes.pyth.network';\n\t\tconst connection = new SuiPriceServiceConnection(endpoint);\n\n\t\t// List of price feed IDs\n\t\tconst priceIDs = [\n\t\t\tfeed, // ASSET/USD price ID\n\t\t];\n\n\t\t// Fetch price feed update data\n\t\tconst priceUpdateData = await connection.getPriceFeedsUpdateData(priceIDs);\n\n\t\t// Initialize Sui Client and Pyth Client\n\t\tconst wormholeStateId = this.config.pyth.wormholeStateId;\n\t\tconst pythStateId = this.config.pyth.pythStateId;\n\n\t\tconst client = new SuiPythClient(this.client, pythStateId, wormholeStateId);\n\n\t\treturn await client.updatePriceFeeds(tx, priceUpdateData, priceIDs); // returns priceInfoObjectIds\n\t}\n\n\tasync getObjectType(objectId: string) {\n\t\t// Fetch the object details from the Sui client\n\t\tconst objectResponse = await this.client.getObject({\n\t\t\tid: objectId,\n\t\t\toptions: { showType: true },\n\t\t});\n\n\t\t// Extract and return the type if available\n\t\tif (objectResponse && objectResponse.data && objectResponse.data.type) {\n\t\t\treturn objectResponse.data.type;\n\t\t}\n\n\t\t// Throw an error if the type is not found\n\t\tthrow new Error(`Type information not found for object ID: ${objectId}`);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
